# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the main branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy dotnet EBS

on:
  push:
    branches: [master]

--- 
- 
  name: "Git setup uses:actions/checkout@v2"
  

- name: Dotnet run
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

    

- name: Publish prod
        run: cd ${{ env.PROJECT_DIR }}; dotnet restore; dotnet publish -r linux-x64 --configuration "Release" --self-contained "true" -o ../site;


- name: Generate deployment package 
        run: cd site; zip -r site.zip . -x '*.git*'
        

 - name: Deploy to EBS
        uses: einaregilsson/beanstalk-deploy@v16
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }} # your aws access key that was added to github secret
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # your aws secret key that was added to github secret
          application_name: ${{ env.EBS_APP_NAME }} # app name to create with when deploying
          environment_name: ${{ env.EBS_ENV_NAME }} # environment name where to deploy the project
          version_label: ${{ github.run_id }} # for versioning. Used to deploy an existing version in Beanstalk
          region: ${{ env.AWS_REGION }}
          deployment_package: site.zip
    
